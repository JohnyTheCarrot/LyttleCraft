import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm"
    id 'com.github.johnrengelman.shadow' version '4.0.2'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

repositories {
    maven { url = "http://maven.fabricmc.net/" }
    maven { url = "https://dl.bintray.com/bymartrixx/maven" }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

    modImplementation "io.github.prospector:modmenu:1.14.5+build.30"

    def cloth = "me.shedaniel.cloth:config-2:4.8.3"
    modImplementation cloth
    include cloth

    modImplementation "me.sargunvohra.mcmods:autoconfig1u:3.3.1"

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    //compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    //compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.1.2'
    def jacksonDatabind = 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
    compile jacksonDatabind
    shadow jacksonDatabind

    def jacksonDataFormat = 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.1.2'
    compile jacksonDataFormat
    shadow jacksonDataFormat
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

tasks.jar.enabled = false
tasks.remapJar.enabled = false


shadowJar {
    destinationDir = file("${buildDir}/tmp/allJar")
    configurations = [project.configurations.shadow]
    relocate 'com.pivovarit.function', 'io.github.daomephsta.inscribe.shadow.com.pivovarit.function'
    relocate 'io.github.daomephsta.mosaic', 'io.github.daomephsta.inscribe.shadow.mosaic'
    relocate 'org.commonmark', 'io.github.daomephsta.inscribe.shadow.org.commonmark'

    //Exclude META-INF entries of shaded deps
    exclude 'META-INF/**'
    exclude '**/*.pdn'
    from('.') {
        include 'LICENSE.md'
        include 'NOTICE.txt'
        include 'licenses/**'
    }
    minimize()
}

task remapShadowJar(type: RemapJarTask) {
    dependsOn shadowJar
    input = shadowJar.archivePath
    addNestedDependencies = true
}

build {
    dependsOn remapShadowJar
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

compileKotlin.kotlinOptions.jvmTarget = "1.8"